package cdata

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

type Str1 struct {
	A Str2
	D Str3
	L int16
	M int32
}

type Str2 struct {
	B int16
	_ byte
	C int32
}

type Str3 struct {
	E int16
	F int32
	G Str4
	J int16
	K int32
}

type Str4 struct {
	H int16
	I int32
}

var (
	paddedStr1 = []byte{
		0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // A: {B, _, 1 byte padding, C},
		0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, // D: {E, 2 byte padding, F,
		0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, //     G: {H, 2 byte padding, I},
		0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, //     J, 2 byte padding, K}
		0x09, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, // L, 2 byte padding, M}
	}

	unpaddedStr1 = []byte{
		0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // A: {B, _, C},
		0x03, 0x00, 0x04, 0x00, 0x00, 0x00, //       D: {E, F,
		0x05, 0x00, 0x06, 0x00, 0x00, 0x00, //           G: {H, I},
		0x07, 0x00, 0x08, 0x00, 0x00, 0x00, //           J, K}
		0x09, 0x00, 0x0a, 0x00, 0x00, 0x00, //       L, M}
	}
)

func TestUnpad(t *testing.T) {
	data := Unpad(paddedStr1, &Str1{})
	assert.Equal(t, unpaddedStr1, data)
}
